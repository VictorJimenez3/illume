***json_output***
{"cleaned_data": "HomeEconGame TheoryGames\nArticlePDF Available\nAlpha-Beta Pruning Algorithm: The Intelligence Behind Strategy Games\nMay 2022\nAuthors:\nPatricio Joshue Mendoza\nUniversidad Yachay Tech\nDownload full-text PDF\nRead full-text\nDownload citation\nCopy link\nReferences (9)\nFigures (2)\nAbstract and Figures\nIn this report, an approach to the Alpha-Beta Pruning is looked. The main idea is to analyze the algorithm itself as an optimization for the Minimax. In game theory, the optimization become significant when the possibilities are too many to considerate all of them. This minimax algorithm is used specifically for those two non-cooperative player games where a punctuation is used to set the winner. The game tree of the Minimax shows every possibility that the first player can do and all the counter-plays that the second player would do; in that way, the first player is trying to maximize his punctuation while the second player try to minimize it. Among all the possibilities, there are the good ones and the bad ones that are useless for the main player; thus, it is necessary to cut those useless branches of the tree in order to avoid the program to compute them unnecessarily. Here is when the Alpha-Beta Pruning becomes the optimal solution.\nMiniMax Generated Tree [ref3]\n\u2026\u00a0\nAlpha-Beta Pruning Optimization [ref8]\n\u2026\u00a0\nFigures - uploaded by Patricio Joshue MendozaAuthor content\nContent may be subject to copyright.\n\nDiscover the world's research\n\n25+ million members\n160+ million publication pages\n2.3+ billion citations\nJoin for free\nPublic Full-text 1\nContent uploaded by Patricio Joshue Mendoza\nAuthor content\nContent may be subject to copyright.\nAlpha-Beta Pruning Algorithm: The Intelligence\nBehind Strategy Games\n1st Patricio Mendoza\nSchool of Mathematical and Computer Sciences\nYachay Tech University\nSan Miguel de Urcuqu\u00b4\n\u0131, Ecuador\npatricio.mendoza@yachaytech.edu.ec\nAbstract\u2014In this report, an approach to the Alpha-Beta\nPruning is looked. The main idea is to analyze the algorithm\nitself as an optimization for the Minimax. In game theory, the\noptimization become signi\ufb01cant when the possibilities are too\nmany to considerate all of them. This minimax algorithm is used\nspeci\ufb01cally for those two non-cooperative player games where\na punctuation is used to set the winner. The game tree of the\nMinimax shows every possibility that the \ufb01rst player can do and\nall the counter-plays that the second player would do; in that\nway, the \ufb01rst player is trying to maximize his punctuation while\nthe second player try to minimize it. Among all the possibilities,\nthere are the good ones and the bad ones that are useless for the\nmain player; thus, it is necessary to cut those useless branches\nof the tree in order to avoid the program to compute them\nunnecessarily. Here is when the Alpha-Beta Pruning becomes\nthe optimal solution.\nIndex Terms\u2014Arti\ufb01cial Intelligence, Algorithms, Alpha-Beta\nPruning\nI. INTRODUCTION\nWithin the world of algorithms, there are those whose\npurpose is based on \ufb01nding the best way to solve problems\nin strategic games. Many developers \ufb01nd it interesting, chal-\nlenging and even satisfying to \ufb01nd an ef\ufb01cient way to solve\nthe problems of classic games like Sudoku, Word Search\nand others like chess. Chess is one of the most important\nstrategic games, reaching the point of being considered an\ninternational sport with world tournaments and competitions;\nfor this reason, the development of arti\ufb01cial intelligence that\ntry to solve typical problems such as \u201dcheckmate in nmoves\u201d\nor \u201dwhat is the next best move\u201d have been mass-produced,\nsome of them tested in competitions against each other. These\narti\ufb01cial intelligence are called the Chess Engines, which\nanalyze the board and the positions of each piece in play\nto generate the best move or a list of the best moves. The\nmost common thing in Chess Engines is to be a command-line\ninterface without a graphical interface that may make it harder\nfor ordinary users to use, but although it might sound counter-\nproductive, this makes it easier for a graphical interface to take\nseveral chess engines and make them compete with each other\nto determine which one performs better in a battle.\nEven though nowadays chess engines can easily beat even\nprofessional players, in its early beginnings its \u201dstrength\u201d was\nlimited to the processing power of the computers in that\ntime. However, the passage of time and the development of\nnew and more ef\ufb01cient technologies allowed that strength to\nincrease continuously, making possible greater simultaneous\ncalculations in less time. In the same way, programming\ntechniques also improved to such an extent that the decision\nmaking of the chess engines became more selective due to\nthe expansion of the database of positions and possibilities, as\nwell as evaluations of the best moves. On the other hand, the\napplication of speci\ufb01c databases for each sector of the game\ncould considerably increase the strength of the engine; for\ninstance, considering that there is always the decisive moment\nat the end of the game, the use of \u201dendgame table-bases\u201d\nallows the engine to perform much better by considering all\npossible \ufb01nal positions in the game. Then, when there are only\nseven pieces or less left, these table-bases can help the engine\ndecide which is the best way to attack against an optimal\ndefense or which is the best way to defend when being at a\ndisadvantage.\nIn this paper, we will explore almost every feature related to\nthe alpha-beta pruning; including the relevance it has either for\ndevelopers communities or casual/professional players, several\npopular games being solved by the algorithm, a short analysis\nabout human and computer perform against each other and a\ndeep examination of its functionality in some games.\nII. IM PO RTANC E\nA. Brief Summary of the History of Chess Engines\nAfter the Second World War, the huge computer develop-\nments made possible the programming for entertainment. Over\nthe time, the meaning of chess engine has been changed. By\nthe 80\u2019s, Tony and Linda Scherzer presented their chess entity\ncalled \u201dBebe\u201d to the 4th World Computer Chess Championship\nbeing one of the strongest of that time; back then, the term\n\u201dchess engine\u201d was only the name of their brand for the\nhardware their company Sys-10 Inc. made. Already in the\n90\u2019s, Deep Blue was already considering the possibility of\nproviding its program with a search engine, focusing more\nCitations (0)\nReferences (9)\nA Grandmaster Chess Machine\nArticle\nOct 1990\nFeng-hsiung Hsu\nThomas Anantharaman\nMurray Campbell\nAndreas Nowatzyk\nView\nProgramming a computer for playing chess\nArticle\nC E ShannonTsan-sheng Hsu\nView\nArtificial Intelligence: A Modern Approach\nChapter\nJan 1995\nS J Russell\nPeter NorvigJ F CannyD D Edwards\nView\nThe Historical Development of Computer Chess and its Impact on Artificial Intelligence.\nConference Paper\nJan 1997\nDavid HeathDerek Allum\nView\nShow abstract\nCheckmate: The cray-1 plays chess\nJan 1981\nR Hyatt\nR. Hyatt, \"Checkmate: The cray-1 plays chess,\" Cray Research, vol. 3, no. 2, 1981.\nIntel speed chess grand prix\nJan 1994\nM Crowther\nM. Crowther, \"Intel speed chess grand prix,\" 1994.\nSmerdon beats komodo 5-1 with knight odds\nJan 2020SCI AMER\nP Doggers\nP. Doggers, \"Smerdon beats komodo 5-1 with knight odds,\" Scientific American, 2020.\nAlpha beta pruning in ai\nFeb 2020\nG L Team\nG. L. Team, \"Alpha beta pruning in ai,\" Feb 2020.\nMinimax with alpha-beta pruning in python\nNov 2021\nM Krivoku\u0107a\nM. Krivoku\u0107a, \"Minimax with alpha-beta pruning in python,\" Nov 2021.\nRecommended publications\nDiscover more about:\u00a0Games\nArticle\nUnified approach to approximate solutions in games and multiobjective programming\nFebruary 1987 \u00b7 Journal of Optimization Theory and Applications\nF. PatroneS. H. Tijs\nUsing a theorem of Tijs, we derive results about approximate solutions for Nash equilibrium theory and for multiobjective problems. We describe conditions under which one can replace an infinite strategy set, an infinite alternative set, or an infinite set of criteria by a finite subset without losing all approximate solutions of the problem under consideration.\nRead more\nArticle\nOn the Computability of Nash Equilibria\nFebruary 1997 \u00b7 Journal of Economic Dynamics and Control\nKislaya Prasad\nWe present some algorithmic unsolvability and incompleteness results in game theory and discuss their significance. The main theorem presents a class of n-person games, where each player's strategy set is the real line and payoffs are continuous functions, for which there could not possibly exist an algorithm to compute either a Nash equilibrium or an \u03f5-equilibrium. Conditions sufficient to ... [Show full abstract]\nRead more\nArticle\nNash equilibria of generalized games in normed spaces without upper semicontinuity\nApril 2010 \u00b7 Journal of Global Optimization\nPaolo Cubiotti\nJen-Chih Yao\nThe aim of this paper is to prove an existence theorem for the Nash equilibria of a noncooperative generalized game with infinite-dimensional strategy spaces. The main peculiarity of this result is the absence of upper semicontinuity assumptions on the constraint multifunctions. Our result is in the same spirit of the paper Cubiotti (J Game Theory 26: 267\u2013273, 1997), where only the case of ... [Show full abstract]\nRead more\nConference Paper\nMultiple Tree for Partially Observable Monte-Carlo Tree Search\nFebruary 2011 \u00b7 Lecture Notes in Computer Science\nDavid Auger\nWe propose an algorithm for computing approximate Nash equilibria of partially observable games using Monte-Carlo tree search based on recent bandit methods. We obtain experimental results for the game of phantom tic-tac-toe, showing that strong strategies can be efficiently computed by our algorithm.\nRead more\n\nor\n Discover by subject area\nRecruit researchers\nJoin for free\nLogin\nCompany\nAbout us\nNews\nCareers\nSupport\nHelp Center\nBusiness solutions\nAdvertising\nRecruiting\n\u00a9 2008-2025 ResearchGate GmbH. All rights reserved.\nTermsPrivacyCopyrightImprintConsent preferences\nShow annotation toolbar", "general_explanation": "Optimization, in the simplest terms, means finding the best possible solution to a problem, given certain constraints. It is the process of making something as functional, effective, or successful as possible. In computer science and game theory, optimization often involves improving the efficiency of an algorithm or process to reduce the amount of resources (like time or memory) it consumes. This can involve streamlining code, reducing the number of calculations needed, or finding shortcuts to arrive at the desired result faster. Optimization techniques are crucial when dealing with complex problems that have a large number of possible solutions, as it helps to identify the most efficient and effective approach.", "detailed_explanation": "In the context of this article, \"optimization for the Minimax\" refers to improving the efficiency of the Minimax algorithm, a decision-making algorithm often used in two-player games. The article argues that the Alpha-Beta Pruning algorithm is an optimization technique for Minimax. Minimax explores all possible game states, which can be computationally expensive. Alpha-Beta Pruning speeds up this process by eliminating branches of the game tree that are guaranteed to be worse than already explored options, thus reducing the amount of computation required to find the optimal move.", "status": "success"}